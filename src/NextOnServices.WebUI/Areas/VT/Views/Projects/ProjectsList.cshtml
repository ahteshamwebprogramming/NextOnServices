@{
    ViewData["Title"] = "ProjectsList";
    //Layout = "~/Views/Shared/_Layout.cshtml";
    Layout = "~/Areas/VT/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" />
<style>
    /* Tighter buttons + consistent icon size */
    .dt-buttons .dt-button {
        padding: .25rem .5rem;
        line-height: 1;
        background: transparent !important;
        border: none !important;
        box-shadow: none !important;
        padding: 0 !important;
        margin: 0 .4rem !important;
        line-height: 0 !important;
        cursor: pointer;
        border: 0 !important;
        outline: 0 !important;
        box-shadow: none !important;
        background: transparent !important;
    }

        .dt-buttons .dt-button img {
            height: 40px; /* change to 48/56 if you want larger */
            width: auto;
            display: block;


        }
</style>

<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <p class="card-title mb-0">Project List</p>
                <div id="exportStatus" style="display:none" class="mb-3">
                    <div class="d-flex align-items-center mb-1">
                        <p id="statusMessage" class="mb-0 flex-grow-1">Preparing download...</p>
                        <div id="exportSpinner" class="spinner-border spinner-border-sm text-primary ms-2" role="status" style="display:none;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <div id="progressContainer" style="width: 100%; background-color: #f3f3f3;">
                        <div id="progressBar" style="width: 0%; height: 20px; background-color: #4caf50; text-align: center; color: white; font-size: 12px;">0%</div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped table-borderless" id="Projects">
                        <thead>
                            <tr>
                                <th>Project Number</th>
                                <th>Project Name</th>
                                <th>LOI</th>
                                <th>Project Start Date</th>
                                <th>Project End Date</th>
                                <th>URL Mapping</th>
                                <th>Edit</th>
                                <th>Active(Yes/No)</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#Projects').DataTable(
                {
                    ajax: {
                        url: "/VT/Projects/GetProjectList",
                        type: "POST"
                    },
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('vendorid', data.Id);
                    },
                    processing: true,
                    serverSide: true,
                    filter: true,
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            text: '<img src="/AdminImg/download%20(1).jpeg" alt="Excel" />',
                            action: async function (e, dt) {
                                await exportAllProjects(dt, 'excel');
                            }
                        },
                        {
                            text: '<img src="/AdminImg/download%20(2).jpeg" alt="CSV" />',
                            action: async function (e, dt) {
                                await exportAllProjects(dt, 'csv');
                            }
                        }
                    ],
                    columns: [
                        {
                            data: "pid",
                            name: "pid",
                            render: function (data, type, rowData) {
                                if (type !== "display") {
                                    return data;
                                }

                                const safeProjectNumber = $('<div/>').text(data ?? '').html();
                                const projectId = rowData?.projectId ?? '';
                                const projectUrl = '/VT/Home/ProjectPage?projectId=' + encodeURIComponent(projectId);

                                return '<a href="' + projectUrl + '">' + safeProjectNumber + '</a>';
                            }
                        },
                        { data: "pname", name: "pname" },
                        { data: "loi", name: "loi" },
                        { data: "sdate", name: "sdate" },
                        { data: "edate", name: "edate" },
                        {
                            "data": "projectId",
                            "autoWidth": true,
                            "searchable": true,
                            createdCell: function (td, cellData, rowData, row, col) {
                                let res = "<td style='padding-top:0px;padding-bottom:0px;'>" + td.innerHTML + "</td>";
                                $(td).replaceWith(res);
                            },
                            render: function (v, d, rowData, row_col_details) {
                                let res = '<input onclick="javascript:window.location.href=\'/VT/Projects/ProjectMapping/' + rowData.projectIdEnc + '\'" style="width: 100px;padding: 9px;font-size: 12px;" type="button" class="btn btn-primary btn-sm" value="URL Mapping">';
                                return res;
                            }
                        },
                        {
                            "data": "projectId",
                            "autoWidth": true,
                            "searchable": true,
                            createdCell: function (td, cellData, rowData, row, col) {
                                let res = "<td style='padding-top:0px;padding-bottom:0px;'>" + td.innerHTML + "</td>";
                                $(td).replaceWith(res);
                            },
                            render: function (v, d, rowData, row_col_details) {
                                let res = '<input onclick="javascript:window.location.href=\'/VT/Projects/AddProject/' + rowData.projectIdEnc + '\'" style="width: 100px;padding: 9px;font-size: 12px;" type="button" class="btn btn-info" value="Edit">';
                                return res;
                            }
                        },
                        {
                            "data": "status",
                            "autoWidth": true,
                            "searchable": true,
                            render: function (status, d, rowData) {
                                const numericStatus = parseInt(status ?? 0);
                                const isActive = numericStatus === 1;
                                const buttonText = isActive ? "Yes" : "No";
                                const nextStatus = isActive ? 0 : 1;
                                const buttonClass = isActive ? "btn-success" : "btn-danger";
                                return '<button type="button" class="btn ' + buttonClass + '" style="width: 100px;padding: 9px;font-size: 12px;" onclick="ChangeStatus(' + rowData.projectId + ',' + nextStatus + ',this)">' + buttonText + '</button>';
                            }, createdCell: function (td, cellData, rowData, row, col) {
                                let res = "<td style='padding-top:0px;padding-bottom:0px;'>" + td.innerHTML + "</td>";
                                $(td).replaceWith(res);
                            },
                        }
                    ],
                    columnDefs: [
                        {
                            targets: [5, 6, 7],
                            orderable: false,
                            searchable: false
                        }
                    ],
                    order: []
                }
            );
        });

        function buildProjectExportParams(dt) {
            const order = dt.order();
            let sortColumnIndex = 0;
            let sortDirection = 'asc';

            if (order && order.length > 0) {
                sortColumnIndex = order[0][0];
                sortDirection = order[0][1];
            }

            const settings = dt.settings()[0] || {};
            const columnInfo = (settings.aoColumns || [])[sortColumnIndex] || {};
            const sortColumn = columnInfo.name || columnInfo.data || 'pid';

            return {
                searchValue: dt.search() || '',
                sortColumn: sortColumn,
                sortDirection: sortDirection,
                sortColumnIndex: sortColumnIndex
            };
        }

        async function exportAllProjects(dt, format) {
            try {
                const params = buildProjectExportParams(dt);
                const batchSize = 500;
                let offset = 0;
                let totalRecords = 0;
                const allData = [];

                $('#exportStatus').show();
                $('#exportSpinner').show();
                $('#statusMessage').text('Preparing download...');
                $('#progressBar').css('width', '0%').text('0%');

                const totalResponse = await fetch('/VT/Projects/GetProjectListTotals', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        start: 0,
                        length: 1,
                        ...params
                    })
                });

                if (!totalResponse.ok) {
                    throw new Error('Unable to determine record count for export.');
                }

                const totalPayload = await totalResponse.json();
                totalRecords = parseInt(totalPayload?.totalRecords ?? 0);

                if (!totalRecords) {
                    $('#statusMessage').text('No records available for export.');
                    $('#progressBar').css('width', '0%').text('0%');
                    $('#exportSpinner').hide();
                    setTimeout(function () {
                        $('#exportStatus').hide();
                    }, 3000);
                    return;
                }

                while (offset < totalRecords) {
                    const batchResponse = await fetch('/VT/Projects/GetProjectListExportData', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            start: offset,
                            length: batchSize,
                            ...params
                        })
                    });

                    if (!batchResponse.ok) {
                        throw new Error('Error fetching project data for export.');
                    }

                    const batch = await batchResponse.json();

                    if (!Array.isArray(batch) || batch.length === 0) {
                        break;
                    }

                    allData.push(...batch);
                    offset += batch.length;

                    const progress = Math.min((offset / totalRecords) * 100, 100);
                    $('#statusMessage').text(`Data download in process... ${Math.min(offset, totalRecords)} of ${totalRecords} records processed.`);
                    $('#progressBar').css('width', `${progress}%`).text(`${Math.round(progress)}%`);

                    if (batch.length < batchSize) {
                        break;
                    }
                }

                if (format === 'excel') {
                    exportProjectsToExcel(allData);
                } else {
                    exportProjectsToCsv(allData);
                }

                $('#statusMessage').text('Data download complete.');
                $('#progressBar').css('width', '100%').text('100%');
            } catch (error) {
                console.error(error);
                $('#statusMessage').text(error.message || 'An unexpected error occurred during export.');
                $('#progressBar').css('width', '0%').text('0%');
            } finally {
                $('#exportSpinner').hide();
                setTimeout(function () {
                    $('#exportStatus').hide();
                }, 3000);
            }
        }

        function getProjectExportMatrix(data) {
            const headers = ['Project Number', 'Project Name', 'LOI', 'Project Start Date', 'Project End Date', 'Active (Yes/No)'];

            const rows = data.map(function (item) {
                const statusValue = parseInt(item?.status ?? 0);
                const activeLabel = statusValue === 1 ? 'Yes' : 'No';
                return [
                    item?.pid ?? '',
                    item?.pname ?? '',
                    item?.loi ?? '',
                    item?.sdate ?? '',
                    item?.edate ?? '',
                    activeLabel
                ];
            });

            return [headers, ...rows];
        }

        function exportProjectsToExcel(data) {
            if (!Array.isArray(data) || data.length === 0) {
                $('#statusMessage').text('No records available for export.');
                $('#exportSpinner').hide();
                return;
            }

            const sheetData = getProjectExportMatrix(data);
            const worksheet = XLSX.utils.aoa_to_sheet(sheetData);

            const headerStyle = { font: { bold: true } };
            const headerRow = sheetData[0];

            for (let columnIndex = 0; columnIndex < headerRow.length; columnIndex++) {
                const cellRef = XLSX.utils.encode_cell({ c: columnIndex, r: 0 });
                if (!worksheet[cellRef]) {
                    worksheet[cellRef] = {};
                }
                worksheet[cellRef].s = headerStyle;
            }

            const columnWidths = sheetData[0].map(function (_, columnIndex) {
                return Math.max(...sheetData.map(function (row) {
                    return (row[columnIndex] || '').toString().length;
                }));
            });

            worksheet['!cols'] = columnWidths.map(function (width) {
                return { wch: width + 2 };
            });

            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Projects');
            XLSX.writeFile(workbook, 'Projects.xlsx');
        }

        function exportProjectsToCsv(data) {
            if (!Array.isArray(data) || data.length === 0) {
                $('#statusMessage').text('No records available for export.');
                $('#exportSpinner').hide();
                return;
            }

            const matrix = getProjectExportMatrix(data);
            const csvContent = matrix.map(function (row) {
                return row.map(function (value) {
                    const text = (value ?? '').toString();
                    if (text.includes('"') || text.includes(',') || text.includes('\n')) {
                        return '"' + text.replace(/"/g, '""') + '"';
                    }
                    return text;
                }).join(',');
            }).join('\r\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'Projects.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }

        function ChangeStatus(projectId, status, curObj) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You want to change the status!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, change it!',
                customClass: {
                    confirmButton: 'btn btn-primary me-3',
                    cancelButton: 'btn btn-label-secondary'
                },
                buttonsStyling: false
            }).then(function (result) {
                if (result.value) {
                    BlockUI();
                    var inputDTO = {};
                    inputDTO.ProjectId = projectId;
                    inputDTO.Status = status;
                    $.ajax({
                        type: "POST",
                        url: "/VT/Projects/ChangeProjectStatus",
                        contentType: 'application/json',
                        data: JSON.stringify(inputDTO),
                        success: function (data) {
                            UnblockUI();
                            $successalert("success", "Status Changed");
                            const numericStatus = parseInt(status ?? 0);
                            const isActive = numericStatus === 1;
                            const nextStatus = isActive ? 0 : 1;
                            const buttonText = isActive ? "Yes" : "No";
                            const buttonClass = isActive ? "btn-success" : "btn-danger";
                            var element = $(curObj);
                            element.removeClass('btn-success btn-danger');
                            element.addClass(buttonClass);
                            element.text(buttonText);
                            element.attr('onclick', 'ChangeStatus(' + projectId + ',' + nextStatus + ',this)');
                        },
                        error: function (error) {
                            $erroralert("Error!", error.responseText);
                            UnblockUI();
                        }
                    });
                }
            });
        }
    </script>
}


